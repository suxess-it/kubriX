argo-cd:
  global:
    domain: argocd-127-0-0-1.nip.io

  configs:
    params:
      server.insecure: true
      application.namespaces: "adn-*"
      applicationsetcontroller.namespaces: "adn-*"
      applicationsetcontroller.allowed.scm.providers: https://github.com/
    secret:
      createSecret: false

    cm:
      timeout.reconciliation: 20s
      application.resourceTrackingMethod: annotation
      accounts.backstage: apiKey

      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs

        "*.upbound.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            local function contains (table, val)
              for i, v in ipairs(table) do
                if v == val then
                  return true
                end
              end
              return false
            end

            local has_no_status = {
              "ProviderConfig",
              "ProviderConfigUsage"
            }

            if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
              return health_status
            end

            if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
              if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                health_status.status = "Healthy"
                health_status.message = "Resource is in use."
                return health_status
              end
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Ready" then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end
            end

            return health_status

        "*.crossplane.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            local function contains (table, val)
              for i, v in ipairs(table) do
                if v == val then
                  return true
                end
              end
              return false
            end

            local has_no_status = {
              "Composition",
              "CompositionRevision",
              "DeploymentRuntimeConfig",
              "ControllerConfig",
              "ProviderConfig",
              "ProviderConfigUsage"
            }
            if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
              return health_status
            end

            if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
              if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                health_status.status = "Healthy"
                health_status.message = "Resource is in use."
                return health_status
              end
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end
            end

            return health_status 

        

    rbac:
      policy.csv: |
        p, backstage, applications, get, */*, allow

  controller:
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true     

  dex:
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true
     
  redis:
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true 

  server:
    ingress:
      enabled: true
      annotations: 
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      extraTls:
        - hosts:
          - argocd-127-0-0-1.nip.io
          # Based on the ingress controller used secret might be optional
          secretName: argocd-server-tls
    extensions:
      enabled: true
      contents:
        - name: argo-rollouts
          url: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.3.6/extension.tar
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true     

  applicationSet:
    allowAnyNamespace: true
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true     

  repoServer:
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true      

  notifications:
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true   
