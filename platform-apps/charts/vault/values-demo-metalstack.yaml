eso:
  providerUrl: "https://vault.demo.kubrix.cloud/"
  backendName: vault-backend
  secretStore: kubrix-kv

  # Copyright (c) HashiCorp, Inc.
  # SPDX-License-Identifier: MPL-2.0
vault:
  injector:
    enabled: false
  server:
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/ttl: "60"
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: vault.demo.kubrix.cloud
          paths: []
      tls: 
        - secretName: vault-server-tls
          hosts:
            - vault.demo.kubrix.cloud
    extraInitContainers:
      - name: utility-downloader
        image: alpine/curl:latest
        command: 
        - /bin/sh
        - -c
        - | 
            cd /usr/local/libexec/vault
            export PLUGIN_VERSION=v2.1.0
            curl -L -o vault-plugin-secrets-github-linux-amd64 https://github.com/martinbaillie/vault-plugin-secrets-github/releases/download/${PLUGIN_VERSION}/vault-plugin-secrets-github-linux-amd64 
            chmod +x vault-plugin-secrets-github-linux-amd64
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.7.1/jq-linux64
            chmod +x jq
            curl -L -o curl https://github.com/moparisthebest/static-curl/releases/download/v8.7.1/curl-amd64
            chmod +x curl
        volumeMounts:
          - name: plugins
            mountPath: /usr/local/libexec/vault
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
    extraContainers:
      - name: auto-initializer
        image: hashicorp/vault:1.18.1
        env: 
          - name: VAULT_ADDR
            valueFrom:
              secretKeyRef:
                name: sx-vault-env-vars
                key: VAULT_ADDR  
        command: 
        - /bin/sh
        - -c
        - | 
            while true; do
              sleep 10
              while [ -z $UNSEAL_KEY ]; do
                sleep 5
                VAULT_STATUS=$(vault status)
                if echo "$VAULT_STATUS" | grep -q "Initialized.*false" && [ $HOSTNAME = 'sx-vault-0' ]; then
                  export INIT_RESPONSE=$(vault operator init -format=json -key-shares=1 -key-threshold=1)
                  echo "$INIT_RESPONSE"
                  export UNSEAL_KEY=$(echo "$INIT_RESPONSE" | /usr/local/libexec/vault/jq -r .unseal_keys_b64[0])
                  export ROOT_TOKEN=$(echo "$INIT_RESPONSE" | /usr/local/libexec/vault/jq -r .root_token)
                  echo "$UNSEAL_KEY"
                  echo "$ROOT_TOKEN"
                  /usr/local/libexec/vault/kubectl delete secret vault-init -n vault
                  /usr/local/libexec/vault/kubectl create secret generic vault-init -n vault --from-literal=unseal_key=${UNSEAL_KEY} --from-literal=root_token=${ROOT_TOKEN} 
                else
                  echo "Vault Initialized"
                fi 
              done   
            done
        volumeMounts:
          - name: plugins
            mountPath: /usr/local/libexec/vault
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
      - name: auto-unsealer
        image: hashicorp/vault:1.18.1
        env: 
          - name: VAULT_ADDR
            valueFrom:
              secretKeyRef:
                name: sx-vault-env-vars
                key: VAULT_ADDR  
        command: 
        - /bin/sh
        - -c
        - | 
            while true; do
              sleep 10
              VAULT_STATUS=$(vault status)
              if echo "$VAULT_STATUS" | grep -q "Initialized.*false" && [ $HOSTNAME != 'sx-vault-0' ]; then
                echo joining raft cluster
                vault operator raft join http://sx-vault-0.sx-vault-internal:8200
                sleep 5
              fi 
              if echo "$VAULT_STATUS" | grep -q "Initialized.*true"; then
                if echo "$VAULT_STATUS" | grep -q "Sealed.*true"; then
                  if [ -f /vault-root-token/unseal_key ]; then
                    vault operator unseal $(cat /vault-root-token/unseal_key)
                    sleep 5
                  else
                    echo unseal key not initialized yet  
                  fi
                else  
                  echo vault already unsealed
                fi
              else  
                echo Vault not initialized yet
              fi
            done
        volumeMounts:
          - name: vault-root-token
            mountPath: /vault-root-token  
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
      - name: vault-initializer
        image: hashicorp/vault:1.18.1
        env: 
          - name: VAULT_ADDR
            valueFrom:
              secretKeyRef:
                name: sx-vault-env-vars
                key: VAULT_ADDR    
        command: 
        - /bin/sh
        - -c
        - | 
          while true; do
            sleep 10
            if [ -f /vault-root-token/root_token ]; then
              export VAULT_TOKEN=$(cat /vault-root-token/root_token)
              VAULT_STATUS=$(vault status)
              if echo "$VAULT_STATUS" | grep -q "Sealed.*false"; then
                if [ ! $(vault read identity/group/name/admins) ]; then
                  # kubernetes
                  if [ ! $(vault read auth/kubernetes/config) ]; then
                    vault auth enable kubernetes
                    vault write auth/kubernetes/config token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  fi
                  # crossplane
                  if [ ! $(vault read auth/kubernetes/role/crossplane) ]; then
                    CROSSPLANETOKEN=$(vault token create -display-name=crossplane-token -policy=root -format=json | /usr/local/libexec/vault/jq -r ."auth.client_token")
                    /usr/local/libexec/vault/kubectl create secret generic crossplane-init -n vault --from-literal=credentials='{"token":"'${CROSSPLANETOKEN}'"}' 
                    vault write auth/kubernetes/role/crossplane bound_service_account_names="*" bound_service_account_namespaces=crossplane policies=crossplane ttl=24h        
                  fi
                else 
                  echo setup complete 
                fi      
              else
                echo vault still sealed
              fi    
            else 
              echo root token not initialized yet    
            fi    
          done  
        volumeMounts:
          - name: vault-root-token
            mountPath: /vault-root-token
          - name: plugins
            mountPath: /usr/local/libexec/vault
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
    volumes:
      - name: plugins
        emptyDir: {}
      - name: vault-root-token
        secret:
          secretName: vault-init
          optional: true 

    volumeMounts:
      - mountPath: /usr/local/libexec/vault
        name: plugins
        readOnly: false 
    dataStorage:
      size: 1Gi
    #auditStorage:
    #  enabled: true
    #  size: 5Gi
    affinity: {}
    ha:
      enabled: true
      replicas: 3
      raft:
        enabled: true
        setNodeId: true
        config: |
          ui = true

          listener "tcp" {
            tls_disable = 1
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            # Enable unauthenticated metrics access (necessary for Prometheus Operator)
            telemetry {
              unauthenticated_metrics_access = "true"
            }
          }

          storage "raft" {
            path = "/vault/data"
          }
          
          # For integrated raft storage and security
          # https://developer.hashicorp.com/vault/docs/configuration#disable_mlock
          disable_mlock = true
          
          telemetry {
            prometheus_retention_time = "30m"
            disable_hostname = true
          }
          
          service_registration "kubernetes" {}
          plugin_directory = "/usr/local/libexec/vault"
  serverTelemetry:
    serviceMonitor:
      enabled: true
  prometheusRules:
    enabled: true
