apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.deployments.postgres.service.name }}"
  labels:
    app: "{{ .Values.deployments.postgres.service.name }}"
spec:
  ports:
    - port: {{.Values.deployments.postgres.service.port}}
      name: "{{ .Values.deployments.postgres.service.name }}"
  selector:
    app: "{{ .Values.deployments.postgres.service.name }}"
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.deployments.postgres.service.name }}"
spec:
  selector:
    matchLabels:
      app: "{{ .Values.deployments.postgres.service.name }}"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: "{{ .Values.deployments.postgres.service.name }}"
    spec:
      initContainers:
      - name: init-clean
        image: busybox
        command: ['sh', '-c', 'rm -rf /var/lib/postgresql/data/*']
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      containers:
        - image: "{{ .Values.deployments.postgres.image.name }}"
          name: "{{ .Values.deployments.postgres.service.name }}"
          envFrom:
            - secretRef:
                name: "{{ .Values.secrets.postgres.name }}"
          ports:
            - containerPort: {{.Values.deployments.postgres.service.port}}
              name: "{{ .Values.deployments.postgres.service.name }}"
          securityContext:
            privileged: false
          volumeMounts:
            - name: "{{ .Values.deployments.postgres.volume.name }}"
              mountPath: "{{ .Values.deployments.postgres.volume.path }}"
          resources:
            limits:
              memory: 512Mi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
      volumes:
        - name: "{{ .Values.deployments.postgres.volume.name }}"
          persistentVolumeClaim:
            claimName: "{{ .Values.pvc.name }}"
