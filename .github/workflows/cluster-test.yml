# This is a basic workflow to help you get started with Actions

name: kind

# Controls when the workflow will run
on:
  # do a full cluster test in main branch and when opening or changing PRs
  push:
    branches: [ "main" ]
    paths:
      - '.github/workflows/cluster-test.yml'
      - '.github/kind-config.yaml'
      - 'platform-apps/charts/**'
      - 'platform-apps/target-chart/templates/**'
      - 'platform-apps/target-chart/values.yaml'
      - 'platform-apps/target-chart/values-kind*'
      - 'Dockerfile'
      - 'install-platform.sh'
      - '.github/workflows/create-kubrix-installer-image.yml'
      - 'install-manifests.yaml'
  pull_request:
    types: [opened, synchronize]
    paths:
      - '.github/workflows/cluster-test.yml'
      - '.github/kind-config.yaml'
      - 'platform-apps/charts/**'
      - 'platform-apps/target-chart/templates/**'
      - 'platform-apps/target-chart/values.yaml'
      - 'platform-apps/target-chart/values-kind*'
      - 'Dockerfile'
      - 'install-platform.sh'
      - '.github/workflows/create-kubrix-installer-image.yml'
      - 'install-manifests.yaml'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Also run AFTER kubrix-installer build completes
  workflow_run:
    workflows: ['create kubrix-installer image']
    types: [completed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  KUBRIX_REPO_BRANCH: ${{ github.head_ref || github.ref_name }}
  KUBRIX_REPO: "https://github.com/${{ github.repository }}"
  
jobs:
  create-kubrix-installer-image:
    if: ${{ github.repository == 'suxess-it/kubriX' || github.repository == 'suxess-it/kubriX-prime' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:         
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            name=ghcr.io/suxess-it/kubrix-installer
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute version
        id: ver
        run: |
          echo "version=$(git describe --tags --dirty --always)" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short=12 HEAD)" >> $GITHUB_OUTPUT
     
      - name: Build and push docker
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.ver.outputs.version }}
            VCS_REF=${{ steps.ver.outputs.sha_short }}
  
  create-cluster:
    needs:
      - create-kubrix-installer-image
    runs-on: ${{ vars.KUBRIX_GITHUB_RUNNER || 'ubuntu-latest' }}
    if: ${{ always() && (needs.create-kubrix-installer-image.result == 'success' || needs.create-kubrix-installer-image.result == 'skipped') }}
    permissions: read-all
    strategy:
      fail-fast: false
      matrix:
        target-type:
          - KIND-DELIVERY
          - KIND-OBSERVABILITY
          - KIND-SECURITY
          - KIND-PORTAL

    steps:
      - name: Checkout
        uses: actions/checkout@v5
 
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kubrix-cluster
          config: ${{ github.workspace }}/.github/kind-config.yaml
          
      - name: install mkcert
        shell: bash
        run: |
          curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
          chmod +x mkcert-v*-linux-amd64
          sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
    
      - name: install k8sgpt
        shell: bash
        run: |
          curl -LO https://github.com/k8sgpt-ai/k8sgpt/releases/download/v0.4.25/k8sgpt_amd64.deb
          sudo dpkg -i k8sgpt_amd64.deb
          k8sgpt analyze

      - name: install kubriX stack
        env:
          KUBRIX_TARGET_TYPE: ${{ matrix.target-type }}
          KUBRIX_CLUSTER_TYPE: "KIND"
          KUBRIX_BACKSTAGE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KUBRIX_REPO_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          KUBRIX_REPO_USERNAME: "dummy"
          KUBRIX_INSTALL_DEBUG: "false"
          KUBRIX_BOOTSTRAP_MAX_WAIT_TIME: ${{ vars.KUBRIX_BOOTSTRAP_MAX_WAIT_TIME }}
          PR_NUMBER: ${{ github.event.number }}
        shell: bash
        run: |
          kubectl create ns kubrix-install
          kubectl create secret generic kubrix-install-secrets -n kubrix-install \
            --from-literal KUBRIX_TARGET_TYPE=${KUBRIX_TARGET_TYPE} \
            --from-literal KUBRIX_CLUSTER_TYPE=${KUBRIX_CLUSTER_TYPE} \
            --from-literal KUBRIX_BACKSTAGE_GITHUB_TOKEN=${KUBRIX_BACKSTAGE_GITHUB_TOKEN} \
            --from-literal KUBRIX_REPO_PASSWORD=${KUBRIX_REPO_PASSWORD} \
            --from-literal KUBRIX_REPO_USERNAME=${KUBRIX_REPO_USERNAME} \
            --from-literal KUBRIX_REPO_BRANCH=${KUBRIX_REPO_BRANCH} \
            --from-literal KUBRIX_REPO=${KUBRIX_REPO} \
            --from-literal KUBRIX_BOOTSTRAP_MAX_WAIT_TIME=${KUBRIX_BOOTSTRAP_MAX_WAIT_TIME} \
            --from-literal KUBRIX_INSTALLER=true
          bash .github/install-kubriX-with-job.sh

      - name: argocd show diff
        continue-on-error: true
        if: always()
        env:
          KUBRIX_TARGET_TYPE: ${{ matrix.target-type }}
        shell: bash
        run: |
          target_chart_values_file=platform-apps/target-chart/values-$(echo ${KUBRIX_TARGET_TYPE} | awk '{print tolower($0)}').yaml
          argocd_apps=$(cat $target_chart_values_file | awk '/^  - name:/ { printf "%s", "sx-"$3" "}' )
          curl -kL -o argocd https://argocd.127-0-0-1.nip.io/download/argocd-linux-amd64
          chmod u+x argocd
          ls -l
          INITIAL_ARGOCD_PASSWORD=$( kubectl get secret -n argocd argocd-initial-admin-secret -o=jsonpath={'.data.password'} | base64 -d )
          ./argocd login argocd.127-0-0-1.nip.io --grpc-web --insecure --username admin --password ${INITIAL_ARGOCD_PASSWORD}
          for app in ${argocd_apps} ; do echo "$app diff" ; ./argocd app diff $app --grpc-web ; done         
          
      - name: kubectl get applications
        if: always()
        shell: bash
        run: |
          kubectl get applications -n argocd
          kubectl get applications -n argocd -o yaml
          
      - name: analyze with k8sgpt
        if: always()
        shell: bash
        run: |
          k8sgpt analyze

      # run testkube tests
      - uses: kubeshop/setup-testkube@v1
        with:
          version: 2.2.5
      - name: testkube tests
        env:
          KUBRIX_TARGET_TYPE: ${{ matrix.target-type }}
        run: |
          testkube run testworkflow -l type=$(echo ${KUBRIX_TARGET_TYPE} | awk '{print tolower($0)}') -f -d

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: testkube-artifacts-${{ matrix.target-type }}
          path: artifacts/
          
      - name: mustgather data for troubleshooting
        if: ${{ failure() }}
        shell: bash
        run: |
          echo "===== node describe ======"
          kubectl describe node kubrix-cluster-control-plane
          echo "===== node top  ======"
          kubectl top node
          echo "===== node yaml ======"
          kubectl get nodes -o yaml
          echo "===== yaml output of all applications ======"
          kubectl get application -n argocd -o yaml
          echo "===== crossplane managed ======"
          kubectl get managed
          kubectl get managed -o yaml
          kubectl get pkg
          kubectl get pkg -o yaml 

      - name: mustgather logs for troubleshooting
        if: ${{ failure() }}
        shell: bash
        run: |
          kubectl logs -n argocd statefulset/sx-argocd-application-controller
          kubectl logs -n argocd deployment/sx-argocd-repo-server
          kubectl logs -n argocd deployment/sx-argocd-applicationset-controller
          kubectl get pods -o name -n crossplane | xargs -I {} kubectl logs -n crossplane {} --all-containers=true
